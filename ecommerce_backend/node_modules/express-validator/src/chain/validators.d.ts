import { CustomValidator, DynamicMessageCreator } from '../base';
import * as Options from '../options';
export interface Validators<Return> {
    not(): Return;
<<<<<<< HEAD
    /**
     * Sets the error message for the previous validator.
     *
     * @param message a function for dynamically creating the error message based on the field value
     * @returns the current validation chain
     */
    withMessage(message: DynamicMessageCreator): Return;
    /**
     * Sets the error message for the previous validator.
     *
     * @param message the error message
     * @returns the current validation chain
     */
    withMessage(message: any): Return;
    /**
     * Adds a custom validator to the validation chain.
     *
     * @param validator the custom validator
     * @returns the current validation chain
     */
    custom(validator: CustomValidator): Return;
    /**
     * Adds a validator to check that the fields exist in the request.
     * By default, this means that the value of the fields may not be `undefined`;
     * all other values are acceptable.
     *
     * @param options
     * @returns the current validation chain
     */
=======
    withMessage(message: DynamicMessageCreator): Return;
    withMessage(message: any): Return;
    custom(validator: CustomValidator): Return;
>>>>>>> 6b88e76aa9671c4029d5c0011f1eb027164f1610
    exists(options?: {
        checkFalsy?: boolean;
        checkNull?: boolean;
    }): Return;
<<<<<<< HEAD
    /**
     * Adds a validator to check if a value is an array.
     *
     * @param options
     * @returns the current validation chain
     */
=======
>>>>>>> 6b88e76aa9671c4029d5c0011f1eb027164f1610
    isArray(options?: {
        min?: number;
        max?: number;
    }): Return;
    isString(): Return;
    notEmpty(options?: Options.IsEmptyOptions): Return;
    contains(elem: any, options?: Options.ContainsOptions): Return;
    equals(comparison: string): Return;
    isAfter(date?: string): Return;
    isAlpha(locale?: Options.AlphaLocale): Return;
    isAlphanumeric(locale?: Options.AlphanumericLocale): Return;
    isAscii(): Return;
    isBase32(): Return;
    isBase64(options?: Options.IsBase64Options): Return;
    isBefore(date?: string): Return;
    isBIC(): Return;
    isBoolean(): Return;
    isBtcAddress(): Return;
    isByteLength(options: Options.MinMaxExtendedOptions): Return;
    isCreditCard(): Return;
    isCurrency(options?: Options.IsCurrencyOptions): Return;
    isDataURI(): Return;
    isDate(): Return;
    isDecimal(options?: Options.IsDecimalOptions): Return;
    isDivisibleBy(number: number): Return;
    isEAN(): Return;
    isEmail(options?: Options.IsEmailOptions): Return;
    isEmpty(options?: Options.IsEmptyOptions): Return;
    isEthereumAddress(): Return;
    isFQDN(options?: Options.IsFQDNOptions): Return;
    isFloat(options?: Options.IsFloatOptions): Return;
    isFullWidth(): Return;
    isHalfWidth(): Return;
    isHash(algorithm: Options.HashAlgorithm): Return;
    isHexColor(): Return;
    isHexadecimal(): Return;
    isHSL(): Return;
    isIBAN(): Return;
    isIdentityCard(locale?: Options.IdentityCard): Return;
    isIMEI(options?: Options.IsIMEIOptions): Return;
    isIP(version?: Options.IPVersion): Return;
    isIPRange(): Return;
    isISBN(version?: number): Return;
    isISSN(options?: Options.IsISSNOptions): Return;
    isISIN(): Return;
    isISO8601(options?: Options.IsISO8601Options): Return;
    isISO31661Alpha2(): Return;
    isISO31661Alpha3(): Return;
    isISRC(): Return;
    isIn(values: any[]): Return;
    isInt(options?: Options.IsIntOptions): Return;
    isJSON(options?: Options.IsJSONOptions): Return;
    isJWT(): Return;
    isLatLong(options?: Options.IsLatLongOptions): Return;
    isLength(options: Options.MinMaxOptions): Return;
    isLocale(): Return;
    isLowercase(): Return;
    isMagnetURI(): Return;
    isMACAddress(options?: Options.IsMACAddressOptions): Return;
    isMD5(): Return;
    isMimeType(): Return;
    isMobilePhone(locale: Options.MobilePhoneLocale | Options.MobilePhoneLocale[], options?: Options.IsMobilePhoneOptions): Return;
    isMongoId(): Return;
    isMultibyte(): Return;
    isNumeric(options?: Options.IsNumericOptions): Return;
    isOctal(): Return;
    isPassportNumber(countryCode?: Options.PassportCountryCode): Return;
    isPort(): Return;
    isPostalCode(locale: Options.PostalCodeLocale): Return;
    isRgbColor(includePercentValues?: boolean): Return;
    isRFC3339(): Return;
    isSemVer(): Return;
    isSlug(): Return;
    isSurrogatePair(): Return;
    isTaxID(locale: Options.TaxIDLocale): Return;
    isURL(options?: Options.IsURLOptions): Return;
    isUUID(version?: Options.UUIDVersion): Return;
    isUppercase(): Return;
    isVariableWidth(): Return;
    isWhitelisted(chars: string | string[]): Return;
    matches(pattern: RegExp | string, modifiers?: string): Return;
}
